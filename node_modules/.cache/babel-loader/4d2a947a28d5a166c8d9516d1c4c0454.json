{"remainingRequest":"/home/and-01/Desktop/Artabia/node_modules/babel-loader/lib/index.js!/home/and-01/Desktop/Artabia/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/and-01/Desktop/Artabia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/and-01/Desktop/Artabia/src/views/Profile.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/and-01/Desktop/Artabia/src/views/Profile.vue","mtime":1639745534371},{"path":"/home/and-01/Desktop/Artabia/node_modules/cache-loader/dist/cjs.js","mtime":1639720129480},{"path":"/home/and-01/Desktop/Artabia/node_modules/babel-loader/lib/index.js","mtime":1639720132820},{"path":"/home/and-01/Desktop/Artabia/node_modules/cache-loader/dist/cjs.js","mtime":1639720129480},{"path":"/home/and-01/Desktop/Artabia/node_modules/vue-loader/lib/index.js","mtime":1639720114548}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Profile.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <section class=\"cover_pfl\">\n      <div class=\"cover_bg_box\">\n        <img  :src=\"userCoverImg\" class=\"cover_bg_img\">\n      </div>      \n       <!-- <img class=\"cover_bg_img\" :src=\"userCoverImg\" />\n       <img :src=\"image\" class=\"cover_bg_img\" /> -->\n        <div class=\"button-wrapper\">\n        <label class=\"custom-file-upload\">\n            <input type='file' @change=\"onFileChange\"/>\n            <b-icon icon=\"upload\" aria-hidden=\"true\" class=\"upload_btn_icon\"></b-icon>\n        </label>\n        </div>\n    </section>\n    <div class=\"container\">\n      <profile-sidebar/>\n      <div class=\"collection-container\">\n        <div class=\"collection-header\">\n          <span>On sale</span>\n          <span>Created</span>\n          <span>Activity</span>\n          <span>Owned</span>\n        </div>\n        <div class=\"collection-body\" v-if=\"cards\">\n          <item-card v-for=\"card in cards\" v-bind:key=\"card\" :card=\"card\"  />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ProfileSidebar from '@/components/ProfileSidebar'\nimport ItemCard from '@/components/ItemCard'\n// import cards from '@/cards.json'\nimport Swal from \"sweetalert2\";\n\nexport default {\n  \n  components: {ProfileSidebar, ItemCard, Swal},\n  props:['cards'],\n  data() {\n    return {\n      cards: null,\n      userCoverImg: null,\n      user : null\n      // getFreeVideo : getFreeVideo()\n    }\n  },\n  async created() {\n\n    Moralis.initialize(\"cUcIRelhTpcM5tvYAHiDuCEuNIpXeRGA56J4OfNM\");\n\n    Moralis.serverURL = 'https://rpzgvjogtika.grandmoralis.com:2053/server'\n\n    if(!localStorage.getItem('Parse/cUcIRelhTpcM5tvYAHiDuCEuNIpXeRGA56J4OfNM/currentUser')){\n      Moralis.authenticate().then(function (user) {\n        console.log(user.get('ethAddress'))\n      })\n    }\n    // this.cards = cards\n    // this.cards = cards.slice(0, 6),\n    // const base64String2 = await btoa(String.fromCharCode(...new Uint8Array(JSON.parse(localStorage.getItem('userdata')).user.coverImage.data)));\n    // const decodedString2 = await atob(base64String2);\n    // console.log(JSON.parse(localStorage.getItem('userdata')).user.coverImage.data, 'coverImage', decodedString2)\n    this.user =  JSON.parse(localStorage.getItem('userdata')).user\n    console.log(this.user, 'user is here')\n    this.userCoverImg =  JSON.parse(localStorage.getItem('userdata')).user.coverImage\nconsole.log(this.userCoverImg, 'cover image is here')\n    // console.log(this.userCoverImg,  this.cards , 'youtube')\n    // const option = { chain: \"rinkeby\", address: \"0xaa737df2b2c4175205af4644cb4e44d7b9cee5d4\"};\n    // console.log(this.im.account, 'account nft')\n      const options = { \n        chain: 'rinkeby',\n        address: '0xf7aeb79dc38dfff49978c2843710e6f100b082d5'\n      };\n      console.log('mmmmmmmmmmmmoooooooorrr')\n        const transfersNFT = await Moralis.Web3API.account.getNFTTransfers(options);\n        console.log(transfersNFT, ' NFT transfer');\n      const polygonNFTs = await Moralis.Web3API.account.getNFTs(options);\n      console.log(polygonNFTs, 'sdfosadfiosiodf');\n      // console.log(transfersNFT);\n      let content = []\n       polygonNFTs.result.forEach( e => {\n                let url = e.token_uri;\n                fetch(url)\n                .then(response => response.json())\n                .then(data => {\n                   \n                    // let currentDiv = document.getElementById(\"content\");\n                    content.push(data.image)\n                    \n                })\n            })\n        this.cards = content\n        console.log(this.cards, 'cards');\n\n  },\ndata: {\n    // active: false,\n    image: null,\n\n\n  },\n\n  methods: {\n    showSuccss() {\n      let timerInterval;\n      Swal.fire({\n        title: \"Profile Updated Successfully\",\n        html: \"closing in <b></b> milliseconds.\",\n        timer: 800,\n        timerProgressBar: true,\n        didOpen: () => {\n          Swal.showLoading();\n          const b = Swal.getHtmlContainer().querySelector(\"b\");\n          timerInterval = setInterval(() => {\n            b.textContent = Swal.getTimerLeft();\n          }, 100);\n        },\n        willClose: () => {\n          clearInterval(timerInterval);\n        },\n      }).then((result) => {\n        /* Read more about handling dismissals below */\n        if (result.dismiss === Swal.DismissReason.timer) {\n          console.log(\"I was closed by the timer\");\n        }\n      });\n    },\n    onFileChange(e) {\n\n      var files = e.target.files || e.dataTransfer.files;\n      console.log(files, 'sahdfhsahdfsadf');\n      if (!files.length)\n        return;\n      this.createImage(files[0]);\n        \n    },\n    async createImage(file) {\n      var image = await new Image();\n      var reader = await new FileReader();\n      console.log(file, 'checking fo the file');\n      var vm = this;\n\n      reader.onload = (e) => {\n        vm.image = e.target.result;\n        this.userCoverImg = e.target.result;\n        this.updateCoverImg(this.userCoverImg);\n      }\n      reader.readAsDataURL(file);\n    }, \n    async updateCoverImg(newImage){\n      // console.log(newImage, 'got the image in the state');\n      let profile_data = {\n        social: {\n          website: this.user.social.website,\n          discord: this.user.social.discord,\n          youtube: this.user.social.youtube,\n          facebook: this.user.social.facebook,\n          twitch: this.user.social.twitch,\n          tiktok: this.user.social.tiktok,\n          snapchat: this.user.social.snapchat,\n        },\n        id: JSON.parse(localStorage.getItem(\"userdata\")).user.id,\n        name: this.user.name,\n        username: this.user.username,\n        email: this.user.email,\n        bio: this.user.bio,\n        lang: this.user.lang,\n        profileImage: this.user.profileImage,\n        coverImage: newImage,\n        createdAt: this.user.createdAt,\n      };\n      let updatedUser = await this.axios.post(\n        `${BACKEND_URL}/user/update`,\n        profile_data,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `${\n              JSON.parse(localStorage.getItem(\"userdata\")).token\n            }`,\n          },\n        }\n      );\n    if(updatedUser.status == 200){\n      this.showSuccss()\n      let Saveduser =  JSON.parse(localStorage.getItem(\"userdata\"))\n      Saveduser.user.name =  this.user.name\n      Saveduser.user.username =  this.user.username\n      Saveduser.user.email =  this.user.email\n      Saveduser.user.bio =  this.user.bio\n      Saveduser.user.lang =  this.user.lang\n      Saveduser.user.profileImage =  this.user.profileImage\n      Saveduser.user.coverImage =  this.image\n      Saveduser.user.createdAt =  this.user.createdAt\n      Saveduser.user.social.website =  this.user.social.website\n      Saveduser.user.social.discord =  this.user.social.discord\n      Saveduser.user.social.youtube =  this.user.social.youtube\n      Saveduser.user.social.facebook =  this.user.social.facebook\n      Saveduser.user.social.twitch =  this.user.social.twitch\n      Saveduser.user.social.tiktok =  this.user.social.tiktok\n      Saveduser.user.social.snapchat =  this.user.social.snapchat\n      Saveduser.token = Saveduser.token\n      Saveduser.message = `The user with id: ${Saveduser.user.id} was found.`\n      localStorage.setItem('userdata', JSON.stringify(Saveduser))\n      this.userCoverImg = this.image\n    }\n      console.log(this.userCoverImg, 'new cover image')\n      console.log(\"Saving profile...\", updatedUser);\n      this.$forceUpdate();\n    } \n    }\n\n}\n\n</script>\n\n<style scoped>\n.container {\n  width: 95%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n}\n\n.collection-container {\n  width: 100%;\n  padding: 2rem 0;\n  z-index: 999;\n}\n\n.collection-header {\n  color: #44484b;\n  font-weight: bold;\n  font-size: 2rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  border-bottom: 1px solid #d8d8d8;\n  padding-bottom: 1rem;\n}\n\n.collection-body {\n  margin-top: 1.5rem;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));\n  grid-gap: 0.5rem;\n  align-items: center;\n}\n\n.card {\n  margin: auto;\n}\n\n.cover_bg_box{\n      height: 263px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n}\n\n@media screen and (min-width: 992px) {\n  .container {\n    max-width: 1300px;\n    flex-direction: row;\n  }\n\n  .collection-container {\n    margin-left: 3rem;\n    width: 70%;\n  }\n\n  .collection-header {\n    max-width: 860px;\n    margin: 0 auto;\n  }\n\n  .collection-body {\n    max-width: 870px;\n    margin: 1.5rem auto 0;\n  }\n}\n.cover_pfl {\n    height: 250px;\n    position: relative;\n    /* overflow: hidden; */\n}\n\n/* ************* */\n\n\ninput[type=\"file\"] {\n  display: none;\n}\n\n.custom-file-upload {\n  cursor: pointer;\n  text-decoration: none;\n  position: absolute;\n  right: 25px;\n  bottom: 7px;\n}\n\n.upload_btn_icon {\n  background:  -webkit-linear-gradient(to right, #e2c4b5, #988bc2) !important;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  font-size: 25px;\n}\n\n@media screen and (max-width:425px) {\n    .cover_bg_box{\n      height: 225px;\n    }\n}\n</style>\n"],"sourceRoot":"src/views"}]}