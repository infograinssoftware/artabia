{"remainingRequest":"/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/and-01/Desktop/Artabiaf/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/and-01/Desktop/Artabiaf/src/views/ViewOrder.vue?vue&type=template&id=1122065f&","dependencies":[{"path":"/home/and-01/Desktop/Artabiaf/src/views/ViewOrder.vue","mtime":1640086158797},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/cache-loader/dist/cjs.js","mtime":1639812331769},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1639812332765},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/cache-loader/dist/cjs.js","mtime":1639812331769},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/index.js","mtime":1639812332765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}