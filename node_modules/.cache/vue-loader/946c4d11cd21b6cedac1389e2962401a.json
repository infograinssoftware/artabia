{"remainingRequest":"/home/and-01/Desktop/Artabia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/and-01/Desktop/Artabia/src/views/Create.vue?vue&type=template&id=6ee6d5b6&scoped=true&","dependencies":[{"path":"/home/and-01/Desktop/Artabia/src/views/Create.vue","mtime":1639726857823},{"path":"/home/and-01/Desktop/Artabia/node_modules/cache-loader/dist/cjs.js","mtime":1639720129480},{"path":"/home/and-01/Desktop/Artabia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1639720114552},{"path":"/home/and-01/Desktop/Artabia/node_modules/cache-loader/dist/cjs.js","mtime":1639720129480},{"path":"/home/and-01/Desktop/Artabia/node_modules/vue-loader/lib/index.js","mtime":1639720114548}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}