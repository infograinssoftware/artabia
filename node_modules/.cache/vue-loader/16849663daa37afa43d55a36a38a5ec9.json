{"remainingRequest":"/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/and-01/Desktop/Artabiaf/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/and-01/Desktop/Artabiaf/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/home/and-01/Desktop/Artabiaf/src/views/Home.vue","mtime":1640176462898},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/cache-loader/dist/cjs.js","mtime":1639812331769},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1639812332765},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/cache-loader/dist/cjs.js","mtime":1639812331769},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/index.js","mtime":1639812332765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}