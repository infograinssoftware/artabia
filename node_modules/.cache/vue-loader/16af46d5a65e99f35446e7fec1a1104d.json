{"remainingRequest":"/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/and-01/Desktop/Artabiaf/src/components/Media.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/and-01/Desktop/Artabiaf/src/components/Media.vue","mtime":1639719312599},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/cache-loader/dist/cjs.js","mtime":1639812331769},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/babel-loader/lib/index.js","mtime":1639812331565},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/cache-loader/dist/cjs.js","mtime":1639812331769},{"path":"/home/and-01/Desktop/Artabiaf/node_modules/vue-loader/lib/index.js","mtime":1639812332765}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCgppbXBvcnQge01vZGVsR2x0ZiB9IGZyb20gJy9zcmMvYXNzZXRzL3BsdWdpbi92dWUtbW9kZWwnOwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJNZWRpYSIsCiAgcHJvcHM6IHsKICAgIHNyYzogU3RyaW5nLAogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBleHRlbnNpb25zOiB7CiAgICAgICAgaW1nOiBbICdqcGcnLCAnanBlZycsICdwbmcnLCAnZ2lmJywgJ3N2ZycsICd3ZWJwJyBdLAogICAgICAgIGF1ZGlvOiBbICdtcDMnLCAnbXBnYSddLAogICAgICAgIHZpZGVvOiBbICdtcDQnLCAnd2ViJywgJ3dhdicsICdvZ2cnIF0sCiAgICAgICAgbW9kZWwzZDogWyAnZ2xiJywgJ2dsdGYnIF0KICAgICAgfQogICAgfQogIH0sCgogIGNvbXB1dGVkOiB7CiAgICBpc0V4dCgpIHsKCiAgICAgIGxldCBleHQgPSB0aGlzLnNyYy5zcGxpdCgnLicpLnBvcCgpCgoKICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiB0aGlzLmV4dGVuc2lvbnMpIHsKICAgICAgICB0aGlzLmV4dGVuc2lvbnNbcHJvcGVydHldLmluY2x1ZGVzKGV4dCkgPyBleHQgPSBwcm9wZXJ0eSA6ICcnCiAgICAgIH0KCiAgICAgIHJldHVybiBleHQ7CgogICAgfQogIH0sCgoKICBjb21wb25lbnRzOiB7CiAgICBNb2RlbEdsdGYsCgoKICB9LAoKCn0K"},{"version":3,"sources":["Media.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;;;AAGA","file":"Media.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <figure>\n      <img v-if=\"isExt === 'img'\" class=\"w-full object-scale-down\" :src=\"src\" alt=\"name\">\n    </figure>\n\n\n    <figure v-if=\"isExt === 'audio'\" class=\"bg-audio w-full bg-cover flex items-end justify-center  pb-3\" style=\"padding-top: 280px\">\n      <audio controls>\n        <source :src=\"src\" type=\"audio/ogg\">\n      </audio>\n    </figure>\n\n\n    <figure v-if=\"isExt === 'model3d'\" >\n      <model-gltf  :src=\"src\" ></model-gltf>\n    </figure>\n\n    <video v-if=\"isExt === 'video'\" class=\"w-full \" controls>\n      <source :src=\"src\" >\n    </video>\n  </div>\n</template>\n\n<script>\n\nimport {ModelGltf } from '/src/assets/plugin/vue-model';\n\nexport default {\n  name: \"Media\",\n  props: {\n    src: String,\n  },\n\n  data() {\n    return {\n      extensions: {\n        img: [ 'jpg', 'jpeg', 'png', 'gif', 'svg', 'webp' ],\n        audio: [ 'mp3', 'mpga'],\n        video: [ 'mp4', 'web', 'wav', 'ogg' ],\n        model3d: [ 'glb', 'gltf' ]\n      }\n    }\n  },\n\n  computed: {\n    isExt() {\n\n      let ext = this.src.split('.').pop()\n\n\n      for (const property in this.extensions) {\n        this.extensions[property].includes(ext) ? ext = property : ''\n      }\n\n      return ext;\n\n    }\n  },\n\n\n  components: {\n    ModelGltf,\n\n\n  },\n\n\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}