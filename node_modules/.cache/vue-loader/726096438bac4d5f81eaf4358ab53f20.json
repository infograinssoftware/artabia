{"remainingRequest":"/home/and-01/Desktop/Artabia/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/and-01/Desktop/Artabia/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/and-01/Desktop/Artabia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/and-01/Desktop/Artabia/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/home/and-01/Desktop/Artabia/src/views/Home.vue","mtime":1639747744231},{"path":"/home/and-01/Desktop/Artabia/node_modules/cache-loader/dist/cjs.js","mtime":1639720129480},{"path":"/home/and-01/Desktop/Artabia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1639720114552},{"path":"/home/and-01/Desktop/Artabia/node_modules/cache-loader/dist/cjs.js","mtime":1639720129480},{"path":"/home/and-01/Desktop/Artabia/node_modules/vue-loader/lib/index.js","mtime":1639720114548}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaG9tZSIgfSwgWwogICAgX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAiaGVyby1zZWN0aW9uIG10LTBhIiwgc3R5bGU6IF92bS5jc3NQcm9wcyB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIGhlcm8tY29udGFpbmVyIiB9LCBbCiAgICAgICAgX3ZtLl9tKDApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGVyby1pbWFnZSIsIGF0dHJzOiB7IGlkOiAiZmVhdHVyZV9pbWciIH0gfSwgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9oZXJvLWltYWdlLnBuZyIpLAogICAgICAgICAgICAgIGFsdDogImFycm93IHVwIgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIGdldC1mZWF0dXJlZCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsZXgganVzdGlmeS1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJmaWd1cmUiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImZsZXggaXRlbXMtY2VudGVyIGhvbWVfZmVhdHVyZWQiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJiLWxpbmsiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaG9tZV9mZWF0dXJlZF9saW5rIiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIvY29udGFjdCIgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaG9tZV9mZWF0U3BhbiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBHZXQgZmVhdHVyZWQgb24gdGhlIGhvbWVwYWdlICIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvaWNvbnMvdXAtYXJyb3ctaWNvbi5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICJhcnJvdyB1cCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSksCiAgICBfYygic2VjdGlvbiIsIHsgc3RhdGljQ2xhc3M6ICJ0cmVuZGluZy1zZWN0aW9uIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2xsZWN0aW9uLWhlYWRlciBmbGV4LWNvbCBtZDpmbGV4LXJvdyIgfSwgWwogICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2xsZWN0aW9uLWF2YXRhciIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvaWNvbnMvdHJlbmRpbmctaWNvbi5wbmciKSwKICAgICAgICAgICAgICBhbHQ6ICJ0cmVuZGluZyBpY29uIgogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImNvbGxlY3Rpb24tdGl0bGUiIH0sIFtfdm0uX3YoIlRyZW5kaW5nIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi10YWdzIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi10YWciIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0YWctYXZhdGFyIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL2ljb25zL2hvdXJnbGFzcy1pY29uLnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICJ0aW1lZCBhdWN0aW9ucyBpY29uIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4iLAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ubXlGaWx0ZXIoIlRpbWVkIikKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlRpbWVkIEF1Y3Rpb25zIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi10YWciIH0sIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0YWctYXZhdGFyIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL2ljb25zL2luZmluaXR5LWljb24ucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIm9wZW4gZm9yIGJpZHMgaWNvbiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIiwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm15RmlsdGVyKCJPcGVuX2JpZHMiKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiT3BlbiBmb3IgYmlkcyIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbGxlY3Rpb24tdGFnIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGFnLWF2YXRhciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9pY29ucy9wcmljZS10YWctaWNvbi5wbmciKSwKICAgICAgICAgICAgICAgICAgYWx0OiAiRml4ZWQgUHJpY2UgaWNvbiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIiwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm15RmlsdGVyKCJGaXhlZCIpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJGaXhlZCBQcmljZSIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi1ib2R5IiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX2woX3ZtLmNhcmRzLCBmdW5jdGlvbihjYXJkKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKCJuZnQtY2FyZHMiLCB7CiAgICAgICAgICAgICAgICBrZXk6IGNhcmQudG9rZW5JZCwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGNhcmQ6IGNhcmQsCiAgICAgICAgICAgICAgICAgIGxlZnRTaWRlVGV4dEJvdHRvbTogIjAuMSBFVEgiLAogICAgICAgICAgICAgICAgICBsZWZ0U2lkZVRleHRUb3A6ICJDdXJyZW50IFByaWNlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICBkaXNwbGF5OiAiZmxleCIsCiAgICAgICAgICAgICAgICAgICJqdXN0aWZ5LWNvbnRlbnQiOiAiY2VudGVyIiwKICAgICAgICAgICAgICAgICAgImFsaWduLWl0ZW0iOiAiY2VudGVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgIV92bS50cmVuZGluZ0xvYWRlcgogICAgICAgICAgICAgICAgICA/IF9jKCJTcGlubmVyIiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbmFtZTogInJpcHBsZSIsIGNvbG9yOiAiIzhjNjVkMyIgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDIKICAgICAgICApCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImV4cGxvcmUtc2VjdGlvbiIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi1oZWFkZXIgbWQ6ZmxleC1yb3cgZmxleCBmbGV4LWNvbCIgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbGV4IHNwYWNlLXgtMiIgfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbGxlY3Rpb24tYXZhdGFyIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL2ljb25zL2V4cGxvcmUtaWNvbi5wbmciKSwKICAgICAgICAgICAgICAgICAgYWx0OiAiZXhwbG9yZSBpY29uIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImNvbGxlY3Rpb24tdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiRXhwbG9yZSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi10YWdzIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZXhwbG9yZUFsbE5mdF9ocmVmIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIi9leHBsb3JlIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbGxlY3Rpb24tdGFnIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGFnLWF2YXRhciBleHBsb3JlLXRhZyIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9pY29ucy90YWctaWNvbi5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiYWxsIG5mdHMiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJBbGwgTkZUcyIpXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi10YWciIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGFnLWF2YXRhciBleHBsb3JlLXRhZyIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvaWNvbnMvdGFnLWljb24ucG5nIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiYXJ0d29yayIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIkFydHdvcmsiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2xsZWN0aW9uLXRhZyIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0YWctYXZhdGFyIGV4cGxvcmUtdGFnIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9pY29ucy90YWctaWNvbi5wbmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJwaG90b2dyYXBoeSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIlBob3RvZ3JhcGh5IildKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi10YWciIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGFnLWF2YXRhciBleHBsb3JlLXRhZyIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvaWNvbnMvdGFnLWljb24ucG5nIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiYXVkaW8iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJBdWRpbyIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbGxlY3Rpb24tdGFnIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRhZy1hdmF0YXIgZXhwbG9yZS10YWciLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL2ljb25zL3RhZy1pY29uLnBuZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogInZpZGVvIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiVmlkZW8iKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2xsZWN0aW9uLXRhZyIgfSwgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0YWctYXZhdGFyIGV4cGxvcmUtdGFnIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9pY29ucy90YWctaWNvbi5wbmciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJjb2xsZWN0aWJsZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJDb2xsZWN0aWJsZXMiKV0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi1ib2R5IiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX2woX3ZtLmNhcmRzLCBmdW5jdGlvbihjYXJkKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKCJuZnQtY2FyZHMiLCB7CiAgICAgICAgICAgICAgICBrZXk6IGNhcmQudG9rZW5JZCwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGNhcmQ6IGNhcmQsCiAgICAgICAgICAgICAgICAgIGxlZnRTaWRlVGV4dEJvdHRvbTogIjAuMSBFVEgiLAogICAgICAgICAgICAgICAgICBsZWZ0U2lkZVRleHRUb3A6ICJDdXJyZW50IFByaWNlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICBkaXNwbGF5OiAiZmxleCIsCiAgICAgICAgICAgICAgICAgICJqdXN0aWZ5LWNvbnRlbnQiOiAiY2VudGVyIiwKICAgICAgICAgICAgICAgICAgImFsaWduLWl0ZW0iOiAiY2VudGVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgIV92bS5leHBsb3JlTG9hZGVyCiAgICAgICAgICAgICAgICAgID8gX2MoIlNwaW5uZXIiLCB7CiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBuYW1lOiAicmlwcGxlIiwgY29sb3I6ICIjOGM2NWQzIiB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMgogICAgICAgICkKICAgICAgXSkKICAgIF0pLAogICAgX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAidG9wLWNyZWF0b3JzLXNlY3Rpb24iIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbGxlY3Rpb24taGVhZGVyIiB9LCBbCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbGxlY3Rpb24tYXZhdGFyIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9pY29ucy90b3AtY3JlYXRvcnMtaWNvbi5wbmciKSwKICAgICAgICAgICAgICBhbHQ6ICJ0b3AtY3JlYXRvcnMgaWNvbiIKICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJjb2xsZWN0aW9uLXRpdGxlIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiVG9wIENyZWF0b3JzIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2xsZWN0aW9uLXRhZ3MiIH0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICBkaXNwbGF5OiAiZmxleCIsCiAgICAgICAgICAgICAgICAianVzdGlmeS1jb250ZW50IjogImNlbnRlciIsCiAgICAgICAgICAgICAgICAiYWxpZ24taXRlbSI6ICJjZW50ZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgIV92bS51c2VyTG9hZGVyCiAgICAgICAgICAgICAgICA/IF9jKCJTcGlubmVyIiwgeyBhdHRyczogeyBuYW1lOiAicmlwcGxlIiwgY29sb3I6ICIjOGM2NWQzIiB9IH0pCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgIF92bS5fbChfdm0udXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfYygiZGl2IiwgeyBrZXk6IHVzZXIuaWQgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sbGVjdGlvbi1ib2R5IiB9LAogICAgICAgICAgICAgICAgICAgIF92bS5fbCh1c2VyLCBmdW5jdGlvbih1KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoInByb2ZpbGUtY2FyZCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAga2V5OiB1Lm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHVzZXI6IHUgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGVyby1pbmZvIiB9LCBbCiAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJoZXJvLXRpdGxlIiB9LCBbCiAgICAgICAgX3ZtLl92KCIgQnJpbmdpbmcgdG9nZXRoZXIgYXJ0aXN0cyBmcm9tIHRoZSBlbnRpcmUgIiksCiAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCJNRU5BIildKSwKICAgICAgICBfdm0uX3YoIiByZWdpb24gIikKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJoZXJvLXN1YnRpdGxlIiB9LCBbCiAgICAgICAgX3ZtLl92KCJUbyBFeHBsb3JlLCBDb2xsZWN0LCAmIFRyYWRlIE5GVHMiKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjdGEtYnRuIiB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSIsIGF0dHJzOiB7IGhyZWY6ICIvZXhwbG9yZSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkV4cGxvcmUgTWFya2V0cGxhY2UiKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}